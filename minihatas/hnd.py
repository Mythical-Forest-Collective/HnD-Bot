from os import environ

from ext.utils import DMSheet

# Initialise variables
dmsheet = DMSheet(environ['DM_SHEET'])

BASE_STATS = ( # Autocomplete values
  "Undefined",
  "Strength",
  "Dexterity",
  "Constitution",
  "Intelligence",
  "Wisdom",
  "Charisma"
)

ROLLABLE_STATS = [
  *BASE_STATS,
]


# Events handler
@client.events
async def ready(client):
    await dmsheet.init()
    print(f"`{client:f}` is ready.")


# Commands
@client.interactions(guild=guilds)
async def link(event, sheet_url:str, prnsoverride:str=None, vrbsoverride:str=None):
    """Links a gsheet to your account. Add pronouns and verbs with format `he/him/himself`, and `is/has`."""
    try:
        sheet = data.new_sheet(sheet_url, event.user.id, prnsoverride, vrbsoverride)
        if sheet:
            yield "Verifying sheet..."
            await data.get(event.user.id).init()
            yield "Google sheet successfully linked!"
            return
        yield "You already linked a sheet to your account!"
        return
    except InvalidSheetException as e:
        del data[event.user.id]
        yield e

@client.interactions(guild=guilds)
async def unlink(event):
    """Unlinks a linked character sheet from your account."""
    sheet = data.get(event.user.id)
    if sheet:
        del data[event.user.id]
        yield "Successfully unlinked character sheet."
        return
    yield "No character sheet linked! If you'd like to link a new one, use the <`link`> command!"

@client.interactions(guild=guilds)
async def char_desc(event):
    """The brief description of your character generated by the bot."""
    sheet = data.get(event.user.id)
    if not sheet:
        yield "No character sheet linked! Link a character sheet with the command!"
        return
    yield
    await sheet.init()
    yield sheet.desc

@client.interactions(guild=guilds)
async def roll(event, dice:('str', 'Use a format like `1d6` to roll 1 6-sided die'), stat:('str', 'Choose a value from the list!')="Undefined", mod:('str', 'Add a base to the stat')=0):
    """Roll dice!"""
    sheet = data.get(event.user.id)
    if not sheet:
        yield "No character sheet linked! Link a character sheet with the link command!"
        return
    dice = dice.lower()
    stat = stat.title()
    yield
    await sheet.init()
    roll = sheet.roll(dice, mod)
    if stat not in ROLLABLE_STATS:
        yield f"{stat} isn't in the rollable stats, defaulting to `Undefined`! Rollable stats are: `{', '.join(ROLLABLE_STATS)}`"
        stat = "Undefined"
    if mod not in BASE_STATS:
        yield f"{mod} isn't a valid modifier, defaulting to `Undefined`! Valid modifiers are: `{', '.join(BASE_STATS)}`"
        mod = "Undefined"
    if roll[1] and stat != "Undefined":
        yield f"Rolled a {dice} which has a value of {roll[0]} for {stat}, with a modifier of {roll[1]} for {mod}, for a total of {roll[0]+roll[1]}!"
    elif not roll[1] and stat != "Undefined":
        yield f"Rolled a {dice} for a value of {roll[0]} for {stat}!"
    elif roll[1] and stat == "Undefined":
        yield f"Rolled a {dice} which has a value of {roll[0]}, with a modifier of {roll[1]} for {mod}, for a total of {roll[0]+roll[1]}!"
    elif not roll[1] and stat == "Undefined":
        yield f"Rolled a {dice} which has a value of {roll[0]}!"


@client.interactions(guild=guilds)
async def monster_dex(event, monster:str):
    """Use the MonsterDex to look through monsters in the campaign!"""
    yield
    await dmsheet.init()
    m = dmsheet.monsters.get(monster.title())
    if not m:
        yield f"`{monster}` isn't a valid monster! Choose one from the list!"
        return
    yield f"```yaml\n{m}```"

@client.interactions(guild=guilds)
async def reload_dm_sheet():
    """This command reloads the DM sheet"""
    yield "Reloading DM sheet..."
    await dmsheet.reload()
    yield "DM sheet reloaded!"


# Autocomplete
@roll.autocomplete('stat')
async def stat_autocomplete(value):
    if value is None:
        return ROLLABLE_STATS
    return [ROLLABLE_STAT for ROLLABLE_STAT in ROLLABLE_STATS if value.title() in ROLLABLE_STAT]

@roll.autocomplete('mod')
async def modifier_autocomplete(value):
    if value is None:
        return BASE_STATS
    return [BASE_STAT for BASE_STAT in BASE_STATS if value.title() in BASE_STAT]

@monster_dex.autocomplete('monster')
async def monster_autocomplete(value):
    if value is None:
        return dmsheet.MONSTER_LIST
    return [MONSTER for MONSTER in dmsheet.MONSTER_LIST if value.title() in MONSTER]
